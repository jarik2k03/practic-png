#version 450

layout(binding = 0) uniform range {
  vec2 scale_coeff;
}params;

layout(rgba8, binding = 1) uniform readonly image2D in_image;
layout(rgba8, binding = 2) uniform writeonly image2D out_image;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

vec4 get_pixel_with_linear_interpolation(vec2 floating_index) {
  const ivec2 solid_idx = ivec2(floor(floating_index)); // целая часть позиции пикселя
  const vec2 relative_floating_idx = floating_index - solid_idx; // дробная часть позиции пикселя

  const vec4 main_pixel = imageLoad(in_image, solid_idx);
  const vec4 right_pixel = imageLoad(in_image, solid_idx + ivec2(1, 0));
  const vec4 down_pixel = imageLoad(in_image, solid_idx + ivec2(0, 1));

  const vec4 interpolated_pixel_by_x = (1.f - relative_floating_idx.x) * main_pixel + relative_floating_idx.x * right_pixel;
  const vec4 interpolated_pixel_by_y = (1.f - relative_floating_idx.y) * main_pixel + relative_floating_idx.y * down_pixel;
  const vec4 interpolated_pixel = (interpolated_pixel_by_x + interpolated_pixel_by_y) / 2.f;
  return interpolated_pixel;
}

vec4 get_pixel_with_no_linear_interpolation(vec2 floating_index) {
  const ivec2 solid_idx = ivec2(floor(floating_index)); // целая часть позиции пикселя

  const vec4 main_pixel = imageLoad(in_image, solid_idx);
  return main_pixel;
}

void main() {
  const ivec2 out_image_idx = ivec2(gl_GlobalInvocationID.xy);
  const vec2 in_image_floating_index = out_image_idx / params.scale_coeff; // позиция пикселя

  const vec4 out_pixel = get_pixel_with_linear_interpolation(in_image_floating_index);
  imageStore(out_image, out_image_idx, out_pixel);
}

